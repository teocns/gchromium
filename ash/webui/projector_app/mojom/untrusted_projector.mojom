// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
module ash.projector.mojom;

import "ash/webui/projector_app/public/mojom/projector_types.mojom";
import "mojo/public/mojom/base/values.mojom";

// UntrustedProjectorPageHandler handles requests that come from the
// javascript to the browser process.
interface UntrustedProjectorPageHandler {
  // Requested by the Projector SWA to check the new screencast precondition
  // state.
  GetNewScreencastPrecondition() => (NewScreencastPrecondition precondition);

  // Requested by the Projector SWA to check if SODA is not available and should
  // be downloaded. Returns false if the device doesn't support SODA.
  ShouldDownloadSoda() => (bool should_download);

  // Requested by the Projector SWA to trigger SODA installation.
  // Returns true if installation was triggered. The installation progress
  // is returned via the OnSoda* methods defined in  UntrustedProjectorPage
  // below.
  InstallSoda() => (bool triggered);

  // Requested by the Projector SWA to fetch a list of screencasts pending to
  // upload or failed to upload.
  GetPendingScreencasts() => (array<PendingScreencast> pending_screencasts);

  // Requested by the Projector SWA to get the value of a user pref.
  GetUserPref(PrefsThatProjectorCanAskFor pref)
    => (mojo_base.mojom.Value value);

  // Requested by the Projector SWA to get the value of a user pref.
  SetUserPref(PrefsThatProjectorCanAskFor pref, mojo_base.mojom.Value value)
    => ();

  // Requested by the Projector SWA to open the Chrome feedback dialog.
  OpenFeedbackDialog() => ();
};

// Implemented in Javascript to handle requests from the browser process.
interface UntrustedProjectorPage {
    // Called by the browser process when the precondition for starting a new
    // projector session changes.
    OnNewScreencastPreconditionChanged(NewScreencastPrecondition precondition);

    // Called by the browser process when SODA installation is making progress.
    OnSodaInstallProgressUpdated(int32 progress);

    // Called by the browser process when SODA has been installed.
    OnSodaInstalled();

    // Called by the browser process when SODA installation has
    // encountered an error.
    OnSodaInstallError();

    // Called by the browser process when the pending
    // screencasts are being uploaded to google drive change.
    OnScreencastsStateChange(
      array<PendingScreencast> pending_screencasts);
};

// Implemented in C++ in the browser process to set up the communication between
// the UntrustedProjectorPage and UntrustedProjectorPageHandler.
interface UntrustedProjectorPageHandlerFactory {
  // Set up the communication between the browser process and the javascript.
  Create(pending_receiver<UntrustedProjectorPageHandler> handler,
         pending_remote<UntrustedProjectorPage> page);
};

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


#include "third_party/blink/public/common/permissions_policy/permissions_policy_features.h"

#include "base/no_destructor.h"
#include "base/feature_list.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom.h"

namespace blink {

namespace {

void UpdatePermissionsPolicyFeatureListFlagDefaults(PermissionsPolicyFeatureList& mutable_feature_list) {
  if (base::FeatureList::IsEnabled(features::kTestFlag)) {
    mutable_feature_list.find(mojom::PermissionsPolicyFeature::kAccelerometer)->second =
      PermissionsPolicyFeatureDefault::EnableForSelf;
  } else {
    mutable_feature_list.find(mojom::PermissionsPolicyFeature::kAccelerometer)->second =
      PermissionsPolicyFeatureDefault::EnableForAll;
  }

}

}  // namespace

PermissionsPolicyFeatureList GetBasePermissionsPolicyFeatureList() {
  static const base::NoDestructor<PermissionsPolicyFeatureList> feature_list([] {
    PermissionsPolicyFeatureList map({        {
          mojom::PermissionsPolicyFeature::kAccelerometer,
          PermissionsPolicyFeatureDefault::EnableForAll
        },    });

    return map;
  }());
  return *feature_list;
}

const PermissionsPolicyFeatureList& GetPermissionsPolicyFeatureList() {
  static const base::NoDestructor<PermissionsPolicyFeatureList> feature_list([] {
    PermissionsPolicyFeatureList map = GetBasePermissionsPolicyFeatureList();

    UpdatePermissionsPolicyFeatureListFlagDefaults(map);
    return map;
  }());
  return *feature_list;
}

void UpdatePermissionsPolicyFeatureListForTesting() {
  const PermissionsPolicyFeatureList& feature_list = GetPermissionsPolicyFeatureList();
  PermissionsPolicyFeatureList& mutable_feature_list = const_cast<PermissionsPolicyFeatureList&>(feature_list);
  UpdatePermissionsPolicyFeatureListFlagDefaults(mutable_feature_list);
}

} // namespace blink
